npm init -y
npm i axios
npm i cheerio
npm i -D babel-cli babel-preset-env babel-preset-stage-3 //최신 사양의 자바스크립트 코드를 구형 브라우저에서 사용할 수 있게 도와주는 바벨 설정을 위한 라이브러리

파일 생성
.babelrc //바벨 설정 파일

아래 내용 작성 바벨의 설정은 프로젝트마다 다르기 때문에 바벨 홈페이지를 볼것!
{
    "preset": ["env", "stage-3"]
}

index.js 파일 생성

package.json 
start 정의
아래처럼 스크립트 부분 수정 
 "scripts": {
    "start": "babel-node index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

cheerio 사용법
https://cheerio.js.org/

환경 변수 설정 라이브러리
npm i dotenv
.env 파일 생성


카카오 메일
https://account.mail.kakao.com/
카카오 메일로 이메일을 받게 되면 모바일 카톡으로도 전송이 된다.
그래서 스마트 폰으로 바로 확인할 수 있다.

무료 이메일 api
sendgrid
https://sendgrid.com/

sendgrid 비밀번호 기존 자주 사용하는 비밀번호 연속2번 입력
https://docs.sendgrid.com/for-developers/sending-email/api-getting-started //시작하는 방법 나옴
https://docs.sendgrid.com/api-reference/how-to-use-the-sendgrid-v3-api/authentication //상세 내용 예제 등등.

강좌
https://www.youtube.com/watch?v=_2FsRjOJARc

CI/CD는 DevOps 업무의 핵심 중 하나이다.
CI는 Continuous Integration: 지속적 통합
CI는 개발자들이 코드를 수정하였을 때 이 변경 사항을 짧은 주기로 테스트 및 빌드되어 공유 repository에 통합되는 것을 의미합니다.
많은 변경 사항이 쌓이기 전에 테스트를 마치고 충돌을 최소화 합니다.
이를 통해 업데이트 시간을 단축하고 신속하게 버그를 찾아낼 수 있습니다.
CI는 프로젝트를 작은 단위로 나누어 개발하는 마이크로 서비스 아키텍처가 대두되면서 더욱 중요해졌습니다.

CD는 Continuous Delivery: 지속적 서비스 제공, Continuous Deployment: 지속적 배포 2가지 의미를 한번에 나타낸 것입니다.
Continuous Delivery는 CI가 끝난 후 검증을 거쳐 배포를 위한 repository나 register에 자동으로 업로드 되는 것을 의미합니다.
배포 직전 단계까지 자동화되는 것을 말합니다.
Continuous Deployment는 배포까지 자동화되어 사용자에게 바로 제공되는 환경까지 나가는 것을 의미합니다. 

CI/CD는 코드 수정부터 배포까지의 과정들이 자동화 하는 것인데 그런 만큼 테스트 품질이 매우 중요하며 문제 발생 시 실시간으로 알람을 받을 수 있는 환경의 조성도 중요합니다.
CI/CD를 도와주는 툴의 종류도 다양한데 Jenkins, Circle CI, Spinnaker, Gitlab CI/CD가 있습니다.

CI/CD 하기 Github Action 자동화, CI/CD, ymal, cron 표현식
이 프로젝트 repository의 settings에 가면 secrets > new repository secret
여기에서 env 값을 입력해서 넣어주면 된다.

workflow yml file 작성
이 프로젝트의 repository의 action으로 간다
현재 프로젝트의 언어를 선택함 ex)node.js setup workflow
이곳에서 workflow 파일을 수정할 수 있다. 로컬 환경에서 수정할수도 있다.

크론 표현식
https://zamezzz.tistory.com/197